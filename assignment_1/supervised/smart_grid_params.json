{
    "DTLearner": {
        "best": {
            "criterion": "gini",
            "max_depth": 4,
            "max_leaf_nodes": 10
        },
        "tuning": {
            "criterion": [
                "entropy",
                "gini"
            ],
            "max_depth": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "max_leaf_nodes": [
                10
            ]
        }
    },
    "BoostingLearner": {
        "best": {
            "n_estimators": "1",
            "learning_rate": 0.1,
            "base_estimator": {
                "module": "sklearn.tree",
                "class": "DecisionTreeClassifier",
                "arg": "max_depth",
                "vals": [
                    5
                ]
            }
        },
        "tuning": {
            "algorithm": [
                "SAMME",
                "SAMME.R"
            ],
            "base_estimator": {
                "module": "sklearn.tree",
                "class": "DecisionTreeClassifier",
                "arg": "max_depth",
                "vals": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ]
            },
            "learning_rate": [
                0.1,
                0.2,
                0.3,
                0.4,
                0.5,
                0.6,
                0.7,
                0.8,
                0.9,
                1.0
            ],
            "n_estimators": [
                1,
                10,
                20,
                30,
                40,
                50,
                60,
                70,
                80,
                90,
                100
            ]
        }
    },
    "KNNLearner": {
        "best": {
            "n_neighbors": 94,
            "metric": "manhattan"
        },
        "tuning": {
            "n_neighbors": [
                1,
                100
            ],
            "metric": [
                "manhattan"
            ]
        }
    },
    "NeuralLearner": {
        "best": {
            "alpha": 1e-2,
            "max_iter": 100
        },
        "tuning": {
            "alpha": [
                1e-6,
                1e-5,
                1e-4,
                1e-3,
                1e-2,
                1e-1,
                1e0,
                1e1,
                1e2
            ],
            "batch_size": [
                "auto",
                10,
                100,
                500
            ],
            "hidden_layer_sizes": [
                [
                    100
                ],
                [
                    30,
                    30
                ]
            ],
            "learning_rate": [
                "adaptive",
                "constant",
                "invscaling"
            ],
            "max_iter": [
                50,
                100,
                150,
                200,
                250,
                300
            ]
        }
    },
    "SVMLearner": {
        "best": {
            "C": 1,
            "gamma": 0.01
        },
        "tuning": {
            "C": [
                0.01,
                0.1,
                1,
                10,
                100,
                1000
            ],
            "gamma": [
                1e-5,
                1e-4,
                1e-3,
                1e-2,
                1e-1,
                1
            ],
            "kernel": [
                "linear",
                "rbf"
            ],
            "tol": [
                1e-6,
                1e-5,
                1e-4,
                1e-3,
                1e-2,
                1e-1
            ]
        }
    }
}